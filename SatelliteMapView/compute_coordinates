#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import print_function, with_statement, division
import sys
sys.path.append('../')
import sattrack
import argparse
import os
import numpy as np
import ephem
import datetime
import time


def compute_coordinates(tlefile, verbose=False):
    '''
    Compute current coordinates in infinite loop.
    Save latest coordinates to coord.js (in current directory)

    Input:
        TLEfile, path to TLE file, str
        verbose, flag for outputting coordinates, bool
    Return:
        None
    '''
    name, line1, line2 = sattrack.read_TLE(tlefile)
    tle = ephem.readtle(name, line1, line2)

    outputfile = 'coord.js'
    sleeptime = 250 / 1000.

    # Compute coordinates and save to file in infinite loop
    try:
        print('\nComputing coordinates using ' + tlefile)
        print('Saving coordinates to ' + outputfile)
        print('\nUpdating coordinates every ' + str(sleeptime * 1000.) + ' ms...')
        while True:
            tle.compute(datetime.datetime.utcnow())

            lat_deg = np.degrees(tle.sublat)
            lon_deg = np.degrees(tle.sublong)

            coordstr = 'var lat = ' + str(lat_deg) + ';\n'
            coordstr += 'var lng = ' + str(lon_deg) + ';\n'
            if verbose:
                print(lat_deg, lon_deg)
            with open(outputfile, 'w') as fp:
                fp.write(coordstr)
            time.sleep(sleeptime)
    except KeyboardInterrupt:
        pass
    finally:
        os.remove(outputfile)
    return


def main():
    '''
    Parse input arguments
    '''
    # Define helptext
    helptext = 'Continuously compute coordinates and save to file. ' +\
               'This script must be active when using sattrack.html'

    # Setup argument parser
    parser = argparse.ArgumentParser(description=helptext)

    # Add positional argument (name of inputfile)
    parser.add_argument('inputfile', help='Path to TLE file')

    # Add optional argument (verbose output flag)
    parser.add_argument('--verbose', action='store_true',
                        help='Print coordinates to stdout')

    # Parse the arguments
    args = parser.parse_args()

    # Compute the coordinates
    compute_coordinates(vars(args)['inputfile'], verbose=vars(args)['verbose'])

    return


if __name__ == '__main__':
    main()
